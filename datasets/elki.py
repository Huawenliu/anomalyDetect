import os
from collections import namedtuple

import numpy as np
import pandas as pd

from anomdet.utils import normalize_scores

def elki_load_scores(filepath, replace_na_and_inf=True):
    '''Loads scores generated by the ELKI software package.
    
    Example steps to generate ELKI scores:
    1. Obtain aloi-27d-50000-max5-tot1508.csv.gz and elki java jar.
    2. Run java -jar elki.jar de.lmu.ifi.dbs.elki.application.greedyensemble.ComputeKNNOutlierScores -startk 3 -stepk 2 -maxk 30 -dbc.in aloi-27d-50000-max5-tot1508.csv.gz -app.out aloi-results.ascii -algorithm.distancefunctioncolorhistogram.HistogramIntersectionDistanceFunction -db.index tree.spatial.rstarvariants.rstar.RStarTreeFactory -verbose 



    Parameters
    ----------
    filepath : str, optional (default=None)
        The path to file with ELKI scores.

    replace_na_and_inf : bool, optional (default=True)
        Whether to replace NA's and INF's.
    
    Returns
    -------
    elki_scores : namedtuple
        The loaded scores.
    
    References
    ----------
    
    .. [1] ELKI Data Mining Framework
           http://elki.dbs.ifi.lmu.de/wiki/Releases
    
    .. [2] Using ELKI
           http://elki.dbs.ifi.lmu.de/wiki/Examples/GreedyEnsemble
    
    '''
    #if filepath is None:
    #    filepath = os.path.join(os.path.dirname(__file__), 'elki_scores.ascii')

    scores_df = pd.read_csv(filepath, skiprows=1, index_col=0, sep=' ', header=None)
    
    rows = scores_df.iterrows()
    labels = rows.next()
    labels = labels[1].values.astype('float').astype('int')
        
    outlier_scores = scores_df.values[1:, :].astype('float').T.copy()
    if replace_na_and_inf:
        print "Normalizing scores"
        outlier_scores = normalize_scores(outlier_scores)

        print "Replacing NA's and INF's with mean of scores"
        if replace_na_and_inf:
            for j in range(outlier_scores.shape[1]):
                scores = outlier_scores[:, j]
                bad = np.where(np.logical_or(np.isnan(scores), np.isinf(scores)))[0]
                outlier_scores[bad, j] = np.mean(np.ma.masked_invalid(scores))

    elki_scores = namedtuple('ELKI_scores', ['outlier_scores', 'labels'])(outlier_scores, labels) 
    return elki_scores
