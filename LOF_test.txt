A = [0 0; 1 0; 0 1; -1 0; 0 -1; 0 -1.1; 0 -1.2; 0 -1.3]
[,1] [,2]
[1,]    0  0.0
[2,]    1  0.0
[3,]    0  1.0
[4,]   -1  0.0
[5,]    0 -1.0
[6,]    0 -1.1
[7,]    0 -1.2
[8,]    0 -1.3

A = matrix(c(0,0,1,0,0,1,-1,0,0,-1, 0,-1.1,0,-1.2,0,-1.3), ncol=2, byrow=T)
A_ = matrix(c(0,0,1,0,-1,0,0,1,0,-1, 0,-1.1,0,-1.2,0,-1.3), ncol=2, byrow=T)

A = np.array([[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [0, -1.1], [0, -1.2], [0, -1.3]])


noise to break symmetry
noise =

    np.array([[0.0709,    0.0960],
    [0.0755,    0.0340],
    [0.0276,    0.0585],
    [0.0680,    0.0224],
    [0.0655,    0.0751],
    [0.0163,    0.0255],
    [0.0119,    0.0506],
    [0.0498,    0.0699]])
	
noise =[0.0709    0.0960;
       0.0755    0.0340;
       0.0276    0.0585;
       0.0680    0.0224;
       0.0655    0.0751;
       0.0163    0.0255;
       0.0119    0.0506;
       0.0498    0.0699]
    


for k=1:7
	[~, lof_ranks] = LOF(A+noise, k)
	csvwrite(strcat('lof_matlab_k_', num2str(k),'.csv'), lof_ranks)
end
	
    


### DDTOOLS
>> A = prdataset(A)
>> lofdd(A, 0.05, 8)
>> blah=struct(ans)
>> blah.data.lof

ans =

    2.1746
    2.4809
    0.9912
    2.4809
    0.9167
    1.0952
    1.0952
    0.9167



OLD,k=2
b =

    1.1716
    0.9268
    0.9268
    0.9268
    1.0000
    1.0000
    1.0000
    1.0000
	
CORRECT (both mine and lofdd)
k=1
	3.2500
    1.0000
    1.0000
    1.0000
    1.0000
    1.0000
    1.0000
    1.0000


k=2
	2.9547
    3.4938
    0.9912
    3.4938
    1.0000
    1.0000
    1.0000
    1.0000
	
k=3
	2.1746
    2.4809
    0.9912
    2.4809
    0.9167
    1.0952
    1.0952
    0.9167

k = 6

    1.0491
    1.0038
    1.1515
    1.0038
    0.9817
    0.9726
    0.9632
    0.9659
	
k=7

    1.0590
    1.0025
    0.9783
    1.0025
    1.0025
    0.9944
    0.9864
    0.9783
	
k=8 (shouldn't be possible, here we've silently failed and gone to k=7)
	1.0590
    1.0025
    0.9783
    1.0025
    1.0025
    0.9944
    0.9864
    0.9783